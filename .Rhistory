source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite("edgeR")
biocLite("KEGGREST")
biocLite("org.Hs.eg.db")
biocLite("pathview")
biocLite("splines")
biocLite("xlsx")
biocLite("gplots")
biocLite("ecodist")
biocLite("GenomicFeatures")
biocLite("AnnotationDbi")
biocLite("goseq")
library(edgeR)
library(gplots
)
library(KEGGREST)
library(org.Hs.eg.db)
library(pathview)
library(splines)
library(xlsx)
library(xlsx)
library(ecodist)
library(GenomicFeatures)
library(AnnotationDbi)
library(goseq)
q()
R.Version()
library(gplots)
x<-7
y<-8
x+y
x*y
(x+y)^2
sum(1:100)
pet<-c("rat","rat","dog","cat")
behavior<- c("good", "good", "bad", "good")
sum(behavior== "good")
behavior=="good" #truth table
which(behavior=="good")
pet[which(behavior=="good")]
unique(pet[which(behavior=="good")])
df <- data.frame(Species=pet, Behavior=behavior)
df
df[1,]
df[,1]
df[3,1]
df$Behavior=="good" #truth table
df[df$Behavior=="good",]
df[df$Species %in% c("cat", "rat"),]
df[-3,]
inches <- c(70, 72, 68, 71, 65)
pounds <- c(180, 195, 135, 165, 125)
plot(inches, pounds) #simple xy plot
length(inches)
sum(inches)
sum(inches)/length(inches)
mean(inches)
sd(inches)
max(inches)
min(inches)
summary(inches)
summary(lm(pounds ~ inches))
save.image("C:/Users/Lauren/Desktop/MDIBL2016/Intro R Variables.RData")
inches.sim <- rnorm(100, mean=mean(inches), sd=sd(inches))
inches.sim
boxplot(inches.sim, main="Boxplot Example", ylab="inches")
dotchart(inches.sim)
hist(inches.sim)
qqnorm(inches.sim)
qqline(inches.sim)
pounds.sim <- rnorm(100, mean=mean(pounds), sd=sd(pounds))
pounds.sim
boxplot(pounds.sim, main="Boxplot Example", ylab="pounds")
summary(lm(pounds.sim ~ inches.sim))
plot(pounds.sim ~ inches.sim)
abline(lm(pounds.sim ~ inches.sim))
save.image("C:/Users/Lauren/Desktop/MDIBL2016/Intro R Variables.RData")
treated <- rnorm(5, mean=0, sd=1)
control <- rnorm(5, mean=0, sd=1)
treated <- rnorm(5, mean=0, sd=1)
Value <- c(control, treated)
Label <- c(rep("control", 5), rep("treated", 5))
t.test(Value ~ factor(Label))$p.value
control <- rnorm(5, mean=0, sd=1)
treated <- rnorm(5, mean=1.5, sd=1)
Value <- c(control, treated)
Label <- c(rep("control", 5), rep("treated", 5))
dotchart(Value, groups=factor(Label))
boxplot(Value ~ factor(Label))
t.test(Value ~ factor(Label))
myFunction <- function () {
control <- rnorm(5, mean=0, sd=1)
treated <- rnorm(5, mean=0, sd=1)
Value <- c(control, treated)
Label <- c(rep("control", 5), rep("treated", 5))
t.test(Value ~ factor(Label))$p.value
}
myFunction()
}
}
for(i in 1:1000){
print(myFunction())
}
pResult <- numeric(1000)
str(pResult)
for(i in 1:1000){
pResult[i] <- myFunction()
}
hist(pResult)
summary(pResult)
pResult < .05
sum(pResult < .05)
sum(pResult < .05)/length(pResult)
sum(pResult*1000 < .05)
summary(p.adjust(pResult, method="bonferroni"))
sum(pResult < .05)/length(pResult)
sum(pResult*1000 < .05)
summary(p.adjust(pResult, method="bonferroni"))
sum(p.adjust(pResult, method="bonferroni") < 0.05)
summary(p.adjust(pResult, method="fdr")) # less stringent
sum(p.adjust(pResult, method="fdr") < 0.05)
ControlExp <- runif(1000, min=1, max= 12)
AffectedGenes <- sample(1:1000, 100)
EffectSize <- rnorm(100, sd=3)
sum(abs(EffectSize) > 1)
hist(ControlExp, xlab="Gene Expression (log2)")
data <- matrix(nrow=1000, ncol=10)
# Label the samples
colnames(data) <- c("C1", "C2", "C3", "C4", "C5", "T1", "T2", "T3", "T4", "T5")
rownames(data) <- 1:1000
# Set each value its native level plus noise
for(i in 1:10){
data[,i] <- ControlExp + rnorm(1000, sd=.5)
}
for(i in 6:10){
data[AffectedGenes,i] <- data[AffectedGenes,i] + EffectSize
}
pairs(data, pch = '.', xlim=c(0,12), ylim=c(0,12))
library(gplots)
heatmap.2(data[AffectedGenes,],
trace="none",
scale="row",
main="Affected Genes")
heatmap.2(data[AffectedGenes,],
#trace="none",
#scale="row",
main="Affected Genes")
pdf(file="AffectedHmap.pdf")
heatmap.2(data[AffectedGenes,],
trace="none",
scale="row",
col=rev(redblue(100)),
main="Affected Genes")
dev.off()
pdf(file="RandomHmap.pdf")
heatmap.2(data[sample(1:1000, 100),],
trace="none",
scale="row",
col=rev(redblue(100)),
main="Random Genes")
dev.off()
heatmap.2(data[sample(setdiff(1:1000, AffectedGenes), 100),],
trace="none",
scale="row",
col=rev(redblue(100)),
main="Unaffected Genes")
A <- apply(data, 1, function (x) {
mean(x[1:10])
}
)
dim(A) <- length(A)
dim(A)
rownames(A) <- rownames(data)
rownames(A)
M <- apply(data, 1, function (x) {
mean(x[6:10]) - mean(x[1:5])
}
)
dim(M) <- length(M)
dim(M)
rownames(M) <- rownames(data)
rownames(M)
M <- apply(data, 1, function (x) {
mean(x[6:10]) - mean(x[1:5])
}
)
dim(M) <- length(M)
dim(M)
rownames(M) <- rownames(data)
rownames(M)
P  <- apply(data, 1, function (x) {
t.test(x[6:10], x[1:5])$p.value
}
)
dim(P) <- length(P)
dim(P)
rownames(P) <- rownames(data)
rownames(P)
plot(M ~ A, ylab="log2(Fold Change)", xlab="Geometric Mean Intensity")
points(M[AffectedGenes] ~ A[AffectedGenes], col = "red", pch = 16)
plot(-log10(P) ~ M)
points(-log10(P)[AffectedGenes] ~ M[AffectedGenes], col = "red", pch = 16)
abline(h=-log10(.05))
abline(v=1)
abline(v=-1)
setwd("C:/Users/Lauren/Desktop/Gradschool/UVM/Spring 2017/Ecological Genomics")
library("DESeq2")
library("ggplot2")
countsTable <- read.delim('countsdata_trim2.txt', header=TRUE, stringsAsFactors=TRUE, row.names=1)
countData <- as.matrix(countsTable)
head(countData)
conds <- read.delim("cols_data_trim.txt", header=TRUE, stringsAsFactors=TRUE, row.names=1)
head(conds)
colData <- as.data.frame(conds)
head(colData)
tail(countData)
head(colData)
head(countData)
colData
colData[,"location"|"int"]
colData[,"location"="int"]
colData[,"location"=int]
colData[,6=int]
colInt<-subset(colData[,6]="int")
colInt<-subset(colData[,6]=="int")
colInt<-subset(colData,location=="int")
length(colInt)
colInt
nrow(colInt)
countInt <- countData[,1:48]
head(countInt)
intdds <- DESeqDataSetFromMatrix(countData = countInt, colData = colInt, design = ~ health)
nrow(countInt)
intdds <- DESeqDataSetFromMatrix(countData = countInt, colData = colData, design = ~ health)
intdds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ health)
countsTable <- read.delim('countsdata_trim2.txt', header=TRUE, stringsAsFactors=TRUE, row.names=1)
countData <- as.matrix(countsTable)
head(countData)
conds <- read.delim("cols_data_trim.txt", header=TRUE, stringsAsFactors=TRUE, row.names=1)
colData <- as.data.frame(conds)
head(colData)
intdds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ health)
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ location + health)
library("DESeq2")
library("ggplot2")
countsTable <- read.delim('countsdata_trim2.txt', header=TRUE, stringsAsFactors=TRUE, row.names=1)
countData <- as.matrix(countsTable)
head(countData)
tail(countData)
conds <- read.delim("cols_data_trim.txt", header=TRUE, stringsAsFactors=TRUE, row.names=1)
head(conds)
colData <- as.data.frame(conds)
head(colData)
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ location + health)
colnames(countData) <- NULL
intdds <- DESeqDataSetFromMatrix(countData = countInt, colData = colInt, design = ~ health)
intdds <- DESeqDataSetFromMatrix(countData = countInt, colData = colInt, colnames = NULL,design = ~ health)
intdds
intdds <- DESeqDataSetFromMatrix(countData = countInt, colData = colInt ,design = ~ health)
colData
library("DESeq2")
library("ggplot2")
countsTable <- read.delim('countsdata_trim2.txt', header=TRUE, stringsAsFactors=TRUE, row.names=1)
countData <- as.matrix(countsTable)
head(countData)
conds <- read.delim("cols_data_trim.txt", header=TRUE, stringsAsFactors=TRUE, row.names=1)
head(conds)
colData <- as.data.frame(conds)
head(colData)
countsTable <- read.delim('countsdata_trim2.txt', header=TRUE, stringsAsFactors=TRUE, row.names=1)
countData <- as.matrix(countsTable)
head(countData)
ncol(countData)
dim(countData)
conds <- read.delim("cols_data_trim.txt", header=TRUE, stringsAsFactors=TRUE, row.names=1)
head(conds)
colData <- as.data.frame(conds)
head(colData)
dim(colData)
conds <- read.delim("cols_data_trim.txt", header=TRUE, stringsAsFactors=TRUE, row.names=1)
head(conds)
colData <- as.data.frame(conds)
head(colData)
dim(colData)
intdds <- DESeqDataSetFromMatrix(countData = countData, colData = colData ,design = ~ health)
colData(dds)$health <- factor(colData(dds)$health, levels=c("H","S"))
colData(intdds)$health <- factor(colData(intdds)$health, levels=c("H","S"))
Model1<-colData(intdds)$health <- factor(colData(intdds)$health, levels=c("H","S"))
res(model1)
results(model1)
results(model1)
results(Model1)
intdds <- intdds[ rowSums(counts(dds)) > 100, ]
intdds <- DESeqDataSetFromMatrix(countData = countData, colData = colData ,design = ~ health)
intdds <- DESeqDataSetFromMatrix(countData = countData, colData = colData ,design = ~ location + health)
intdds <- intdds[ rowSums(counts(dds)) > 100, ]
intdds <- intdds[ rowSums(counts(intdds)) > 100, ]
Model1<-colData(intdds)$health <- factor(colData(intdds)$health, levels=c("H","S"))
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData ,design = ~ location + health)
dds <- dds[ rowSums(counts(dds)) > 100, ]
Model1<-colData(dds)$health <- factor(colData(dds)$health, levels=c("H","S"))
colInt<-subset(colData,location=="int")
nrow(colInt)
colSub <- subset(colData, location=="sub")
countDataINT<-countData[, which(colnames(countData) %in% row.names(colINT))]
colInt<-subset(colData,location=="int")
colSub <- subset(colData, location=="sub")
nrow(colInt)
countDataInt<-countData[, which(colnames(countData) %in% row.names(colInt))]
countDataSub<-countData[, -which(colnames(countData) %in% row.names(colInt))]
dim(countDataInt)
dim(countDataSub)
countDataInt<-countData[, which(colnames(countData) %in% row.names(colInt))]
countDataSub<-countData[, -which(colnames(countData) %in% row.names(colInt))]
dim(countDataInt)
dim(countDataSub)
ddsInt <- DESeqDataSetFromMatrix(countData = countDataInt, colData = colInt ,design = ~ health)
ddsInt <- ddsInt[ rowSums(counts(ddsInt)) > 100, ]
Model1<-colData(ddsInt)$health <- factor(colData(ddsInt)$health, levels=c("H","S"))
ddsSub <- DESeqDataSetFromMatrix(countData = countDataSub, colData = colSub ,design = ~ health)
ddsSub <- ddsSub[ rowSums(counts(ddsSub)) > 100, ]
Model1<-colData(ddsSub)$health <- factor(colData(ddsSub)$health, levels=c("H","S"))
countsTable <- read.delim('countsdata_trim2.txt', header=TRUE, stringsAsFactors=TRUE, row.names=1)
countData <- as.matrix(countsTable)
head(countData)
ncol(countData)
dim(countData)
conds <- read.delim("cols_data_trim.txt", header=TRUE, stringsAsFactors=TRUE, row.names=1)
head(conds)
colData <- as.data.frame(conds)
head(colData)
dim(colData)
colInt<-subset(colData,location=="int")
colSub <- subset(colData, location=="sub")
nrow(colInt)
countDataInt<-countData[, which(colnames(countData) %in% row.names(colInt))]
countDataSub<-countData[, -which(colnames(countData) %in% row.names(colInt))]
dim(countDataInt)
dim(countDataSub)
ddsInt <- DESeqDataSetFromMatrix(countData = countDataInt, colData = colInt ,design = ~ health)
ddsInt <- ddsInt[ rowSums(counts(ddsInt)) > 100, ]
ModelInt<-colData(ddsInt)$health <- factor(colData(ddsInt)$health, levels=c("H","S"))
ddsSub <- DESeqDataSetFromMatrix(countData = countDataSub, colData = colSub ,design = ~ health)
ddsSub <- ddsSub[ rowSums(counts(ddsSub)) > 100, ]
ModelSub<-colData(ddsSub)$health <- factor(colData(ddsSub)$health, levels=c("H","S"))
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData ,design = ~ location + health)
dds <- dds[ rowSums(counts(dds)) > 100, ]
ModelLoc<-colData(dds)$health <- factor(colData(dds)$health, levels=c("H","S"))
ModelInt
ddsInt <- DESeqDataSetFromMatrix(countData = countDataInt, colData = colInt ,design = ~ health)
ddsInt <- ddsInt[ rowSums(counts(ddsInt)) > 100, ]
ddsInt<-colData(ddsInt)$health <- factor(colData(ddsInt)$health, levels=c("H","S"))
ddsInt <- DESeq(ddsInt)
countDataInt<-countData[, which(colnames(countData) %in% row.names(colInt))]
countDataSub<-countData[, -which(colnames(countData) %in% row.names(colInt))]
dim(countDataInt)
dim(countDataSub)
ddsInt <- DESeqDataSetFromMatrix(countData = countDataInt, colData = colInt ,design = ~ health)
ddsInt <- ddsInt[ rowSums(counts(ddsInt)) > 100, ]
colData(ddsInt)$health <- factor(colData(ddsInt)$health, levels=c("H","S"))
ddsInt <- DESeq(ddsInt)
summary(resInt)
resInt <- results(ddsInt)
summary(resInt)
ddsSub <- DESeqDataSetFromMatrix(countData = countDataSub, colData = colSub ,design = ~ health)
ddsSub <- ddsSub[ rowSums(counts(ddsSub)) > 100, ]
colData(ddsSub)$health <- factor(colData(ddsSub)$health, levels=c("H","S"))
ddsSub <- DESeq(ddsSub)
resSub <- results(ddsSub)
summary(resSub)
ddsLoc <- DESeqDataSetFromMatrix(countData = countData, colData = colData ,design = ~ location + health)
ddsLoc <- ddsLoc[ rowSums(counts(ddsLoc)) > 100, ]
colData(ddsLoc)$health <- factor(colData(ddsLoc)$health, levels=c("H","S"))
ddsLoc <- DESeq(ddsLoc)
resLoc <- results(ddsLoc)
summary(resLoc)
resLoc <- results(ddsLoc)
resLoc <- resLoc[order(resLoc$padj),]
head(resSub)
countsTable <- read.delim('countsdata_trim2.txt', header=TRUE, stringsAsFactors=TRUE, row.names=1)
countData <- as.matrix(countsTable)
conds <- read.delim("cols_data_trim.txt", header=TRUE, stringsAsFactors=TRUE, row.names=1)
colData <- as.data.frame(conds)
ddsLoc <- DESeqDataSetFromMatrix(countData = countData, colData = colData ,design = ~ location + health)
ddsLoc <- ddsLoc[ rowSums(counts(ddsLoc)) > 100, ]
colData(ddsLoc)$health <- factor(colData(ddsLoc)$health, levels=c("H","S"))
ddsLoc <- DESeq(ddsLoc)
resLoc <- results(ddsLoc)
resLoc <- resLoc[order(resLoc$padj),]
head(resSub)
resLoc <- resLoc[order(resLoc$pvalue),]
head(resSub)
summary(resLoc)
