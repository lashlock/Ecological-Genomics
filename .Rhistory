source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite("edgeR")
biocLite("KEGGREST")
biocLite("org.Hs.eg.db")
biocLite("pathview")
biocLite("splines")
biocLite("xlsx")
biocLite("gplots")
biocLite("ecodist")
biocLite("GenomicFeatures")
biocLite("AnnotationDbi")
biocLite("goseq")
library(edgeR)
library(gplots
)
library(KEGGREST)
library(org.Hs.eg.db)
library(pathview)
library(splines)
library(xlsx)
library(xlsx)
library(ecodist)
library(GenomicFeatures)
library(AnnotationDbi)
library(goseq)
q()
R.Version()
library(gplots)
x<-7
y<-8
x+y
x*y
(x+y)^2
sum(1:100)
pet<-c("rat","rat","dog","cat")
behavior<- c("good", "good", "bad", "good")
sum(behavior== "good")
behavior=="good" #truth table
which(behavior=="good")
pet[which(behavior=="good")]
unique(pet[which(behavior=="good")])
df <- data.frame(Species=pet, Behavior=behavior)
df
df[1,]
df[,1]
df[3,1]
df$Behavior=="good" #truth table
df[df$Behavior=="good",]
df[df$Species %in% c("cat", "rat"),]
df[-3,]
inches <- c(70, 72, 68, 71, 65)
pounds <- c(180, 195, 135, 165, 125)
plot(inches, pounds) #simple xy plot
length(inches)
sum(inches)
sum(inches)/length(inches)
mean(inches)
sd(inches)
max(inches)
min(inches)
summary(inches)
summary(lm(pounds ~ inches))
save.image("C:/Users/Lauren/Desktop/MDIBL2016/Intro R Variables.RData")
inches.sim <- rnorm(100, mean=mean(inches), sd=sd(inches))
inches.sim
boxplot(inches.sim, main="Boxplot Example", ylab="inches")
dotchart(inches.sim)
hist(inches.sim)
qqnorm(inches.sim)
qqline(inches.sim)
pounds.sim <- rnorm(100, mean=mean(pounds), sd=sd(pounds))
pounds.sim
boxplot(pounds.sim, main="Boxplot Example", ylab="pounds")
summary(lm(pounds.sim ~ inches.sim))
plot(pounds.sim ~ inches.sim)
abline(lm(pounds.sim ~ inches.sim))
save.image("C:/Users/Lauren/Desktop/MDIBL2016/Intro R Variables.RData")
treated <- rnorm(5, mean=0, sd=1)
control <- rnorm(5, mean=0, sd=1)
treated <- rnorm(5, mean=0, sd=1)
Value <- c(control, treated)
Label <- c(rep("control", 5), rep("treated", 5))
t.test(Value ~ factor(Label))$p.value
control <- rnorm(5, mean=0, sd=1)
treated <- rnorm(5, mean=1.5, sd=1)
Value <- c(control, treated)
Label <- c(rep("control", 5), rep("treated", 5))
dotchart(Value, groups=factor(Label))
boxplot(Value ~ factor(Label))
t.test(Value ~ factor(Label))
myFunction <- function () {
control <- rnorm(5, mean=0, sd=1)
treated <- rnorm(5, mean=0, sd=1)
Value <- c(control, treated)
Label <- c(rep("control", 5), rep("treated", 5))
t.test(Value ~ factor(Label))$p.value
}
myFunction()
}
}
for(i in 1:1000){
print(myFunction())
}
pResult <- numeric(1000)
str(pResult)
for(i in 1:1000){
pResult[i] <- myFunction()
}
hist(pResult)
summary(pResult)
pResult < .05
sum(pResult < .05)
sum(pResult < .05)/length(pResult)
sum(pResult*1000 < .05)
summary(p.adjust(pResult, method="bonferroni"))
sum(pResult < .05)/length(pResult)
sum(pResult*1000 < .05)
summary(p.adjust(pResult, method="bonferroni"))
sum(p.adjust(pResult, method="bonferroni") < 0.05)
summary(p.adjust(pResult, method="fdr")) # less stringent
sum(p.adjust(pResult, method="fdr") < 0.05)
ControlExp <- runif(1000, min=1, max= 12)
AffectedGenes <- sample(1:1000, 100)
EffectSize <- rnorm(100, sd=3)
sum(abs(EffectSize) > 1)
hist(ControlExp, xlab="Gene Expression (log2)")
data <- matrix(nrow=1000, ncol=10)
# Label the samples
colnames(data) <- c("C1", "C2", "C3", "C4", "C5", "T1", "T2", "T3", "T4", "T5")
rownames(data) <- 1:1000
# Set each value its native level plus noise
for(i in 1:10){
data[,i] <- ControlExp + rnorm(1000, sd=.5)
}
for(i in 6:10){
data[AffectedGenes,i] <- data[AffectedGenes,i] + EffectSize
}
pairs(data, pch = '.', xlim=c(0,12), ylim=c(0,12))
library(gplots)
heatmap.2(data[AffectedGenes,],
trace="none",
scale="row",
main="Affected Genes")
heatmap.2(data[AffectedGenes,],
#trace="none",
#scale="row",
main="Affected Genes")
pdf(file="AffectedHmap.pdf")
heatmap.2(data[AffectedGenes,],
trace="none",
scale="row",
col=rev(redblue(100)),
main="Affected Genes")
dev.off()
pdf(file="RandomHmap.pdf")
heatmap.2(data[sample(1:1000, 100),],
trace="none",
scale="row",
col=rev(redblue(100)),
main="Random Genes")
dev.off()
heatmap.2(data[sample(setdiff(1:1000, AffectedGenes), 100),],
trace="none",
scale="row",
col=rev(redblue(100)),
main="Unaffected Genes")
A <- apply(data, 1, function (x) {
mean(x[1:10])
}
)
dim(A) <- length(A)
dim(A)
rownames(A) <- rownames(data)
rownames(A)
M <- apply(data, 1, function (x) {
mean(x[6:10]) - mean(x[1:5])
}
)
dim(M) <- length(M)
dim(M)
rownames(M) <- rownames(data)
rownames(M)
M <- apply(data, 1, function (x) {
mean(x[6:10]) - mean(x[1:5])
}
)
dim(M) <- length(M)
dim(M)
rownames(M) <- rownames(data)
rownames(M)
P  <- apply(data, 1, function (x) {
t.test(x[6:10], x[1:5])$p.value
}
)
dim(P) <- length(P)
dim(P)
rownames(P) <- rownames(data)
rownames(P)
plot(M ~ A, ylab="log2(Fold Change)", xlab="Geometric Mean Intensity")
points(M[AffectedGenes] ~ A[AffectedGenes], col = "red", pch = 16)
plot(-log10(P) ~ M)
points(-log10(P)[AffectedGenes] ~ M[AffectedGenes], col = "red", pch = 16)
abline(h=-log10(.05))
abline(v=1)
abline(v=-1)
setwd("C:/Users/Lauren/Desktop/Gradschool/UVM/Spring 2017/Ecological Genomics")
source("http://bioconductor.org/biocLite.R")
biocLite(c("AnnotationDbi", "impute", "GO.db", "preprocessCore"))
a
library(WGCNA);
library("WGCNA")
install.packages("WGCNA")
setwd("C:/Users/Lauren/Desktop/Gradschool/UVM/Spring 2017/Ecological Genomics")
install.packages("WGCNA")
library("WGCNA")
options(stringsAsFactors = FALSE);
starData = read.csv("norm.counts.csv");
dim(starData);
names(starData);
sdatExpr0 = as.data.frame(t(starData[, -c(1:1)]));
dim(sdatExpr0)
names(sdatExpr0) = starData$X;
rownames(sdatExpr0) = names(starData)[-c(1:1)];
sgsg = goodSamplesGenes(sdatExpr0, verbose = 3);
sgsg$allOK
if (!sgsg$allOK)
{
# Optionally, print the gene and sample names that were removed:
if (sum(!sgsg$goodGenes)>0)
printFlush(paste("Removing genes:", paste(names(sdatExpr0)[!sgsg$goodGenes], collapse = ", ")));
if (sum(!gsg$goodSamples)>0)
printFlush(paste("Removing samples:", paste(rownames(sdatExpr0)[!sgsg$goodSamples], collapse = ", ")));
# Remove the offending genes and samples from the data:
datExpr0 = datExpr0[sgsg$goodSamples, sgsg$goodGenes]
}
sampleTree = hclust(dist(sdatExpr0), method = "average");
sizeGrWindow(12,9)
sizeGrWindow(12,9)
sizeGrWindow(12,9)
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2)
abline(h = 20000000, col = "red");
clust = cutreeStatic(sampleTree, cutHeight = 20000000, minSize = 10)
table(clust)
keepSamples = (clust==1)
sdatExpr = sdatExpr0[keepSamples, ]
nGenes = ncol(sdatExpr)
nSamples = nrow(sdatExpr)
traitData = read.csv("cols_data_trim.csv");
traitData = read.csv("cols_data_trim.txt");
dim(traitData)
names(traitData)
traitData = read.csv("cols_data_trim.txt");
dim(traitData)
names(traitData)
